// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 获取好友信息失败
func IsGetFriendListFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GetFriendList_FAIL.String() && e.Code == 410
}

// 获取好友信息失败
func ErrorGetFriendListFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_GetFriendList_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取好友信息失败
func IsGetFriendsInfoFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GetFriendsInfo_FAIL.String() && e.Code == 410
}

// 获取好友信息失败
func ErrorGetFriendsInfoFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_GetFriendsInfo_FAIL.String(), fmt.Sprintf(format, args...))
}

// 添加好友失败
func IsAddFriendFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_AddFriend_FAIL.String() && e.Code == 410
}

// 添加好友失败
func ErrorAddFriendFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_AddFriend_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取好友申请列表
func IsGetFriendApplyListFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GetFriendApplyList_FAIL.String() && e.Code == 410
}

// 获取好友申请列表
func ErrorGetFriendApplyListFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_GetFriendApplyList_FAIL.String(), fmt.Sprintf(format, args...))
}

// 添加黑名单
func IsAddBlacklistFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_AddBlacklist_FAIL.String() && e.Code == 410
}

// 添加黑名单
func ErrorAddBlacklistFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_AddBlacklist_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除黑名单
func IsRemoveBlacklistFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_RemoveBlacklist_FAIL.String() && e.Code == 410
}

// 删除黑名单
func ErrorRemoveBlacklistFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_RemoveBlacklist_FAIL.String(), fmt.Sprintf(format, args...))
}

// 是否好友
func IsIsFriendFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_IsFriend_FAIL.String() && e.Code == 410
}

// 是否好友
func ErrorIsFriendFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_IsFriend_FAIL.String(), fmt.Sprintf(format, args...))
}

// 是否黑名单
func IsIsInBlackListFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_IsInBlackList_FAIL.String() && e.Code == 410
}

// 是否黑名单
func ErrorIsInBlackListFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_IsInBlackList_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取黑名单列表
func IsGetBlacklistFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GetBlacklist_FAIL.String() && e.Code == 410
}

// 获取黑名单列表
func ErrorGetBlacklistFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_GetBlacklist_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除好友
func IsDeleteFriendFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_DeleteFriend_FAIL.String() && e.Code == 410
}

// 删除好友
func ErrorDeleteFriendFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_DeleteFriend_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除好友
func IsAddFriendResponseFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_AddFriendResponse_FAIL.String() && e.Code == 410
}

// 删除好友
func ErrorAddFriendResponseFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_AddFriendResponse_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除好友
func IsSetFriendRemarkFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_SetFriendRemark_FAIL.String() && e.Code == 410
}

// 删除好友
func ErrorSetFriendRemarkFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_SetFriendRemark_FAIL.String(), fmt.Sprintf(format, args...))
}
