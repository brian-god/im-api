syntax = "proto3";

package api.friend.v1;

option go_package = "api/friend/v1;v1";
option java_multiple_files = true;
option java_package = "api.friend.v1";
import "api/common/model/v1/friend.proto";
import "api/common/model/v1/user.proto";
import "api/common/page/page.proto";

service Friend {
  //添加好友
  rpc AddFriend (AddFriendReq) returns (AddFriendReply);
  //同意或拒绝好友请求
  rpc AddFriendResponses(AddFriendResponseReq)returns(AddFriendResponseReply);
  //删除好友
  rpc DeleteFriend (DeleteFriendReq) returns (DeleteFriendReply);
  //设置好友资料
  rpc SetFriendInfo (SetFriendInfoReq) returns (SetFriendInfoReply);
  //好友列表
  rpc ListFriend (ListFriendReq) returns (ListFriendReply);
  // 根据好友id好友数据
  rpc FriendByIds(FriendByIdsReq)returns(FriendByIdsReply);
  //申请列表
  rpc FriendApplyList(FriendApplyListReq)returns(FriendApplyListReply);
  // 获取用户所有的好友id
  rpc GetFriendIDs(GetFriendIDsReq)returns(GetFriendIDsReply);
  // 是否好友
  rpc IsFriend(IsFriendReq) returns(IsFriendReply);
  // 获取主动发出去的好友申请列表
  rpc GetFriendsApplyFrom(GetFriendsApplyFromReq)returns(GetFriendsApplyFromReply);
  // 获取收到的好友申请列表
  rpc GetFriendsApplyReceive(GetFriendsApplyReceiveReq)returns(GetFriendsApplyReceiveReply);
  // 根据申请人和被申请人获取请求数据
  rpc GetFriendRequestByApplicant(GetFriendRequestByApplicantReq)returns(GetFriendRequestByApplicantReply);
  // 单方面删除用户所有好友
  rpc DeleteAllFriends(DeleteAllFriendsReq)returns(DeleteAllFriendsReply);
  //获取同步的好友信息
  rpc GetSyncFriendInfo(GetSyncFriendReq)returns(GetSyncFriendReply);

  // 以下是黑名单接口
  //添加黑名单
  rpc AddBlack(AddBlackReq)returns(AddBlackReply);
  //移除黑名单
  rpc RemoveBlackList(RemoveBlackListReq)returns(RemoveBlackListReply);
  // 是否黑名单
  rpc IsBlack(IsBlackReq) returns(IsBlackReply);
  // 获取黑名单列表
  rpc GetBlacklist(GetBlacklistReq) returns(GetBlacklistReply);

}
/*
    添加好友
    -------------------------------------------
 */
message AddFriendReq {
  //发起方
  string  fromUserID = 1;
  //接收方
  string  toUserID = 2;
  //备注
  string remarkMsg = 3;
  //添加好友的请求验证
  string reqMsg = 4;
  //来源类型(可选) 1:名片2:群3:id4:手机号5:二维码
  int64 type = 5;
  string userID = 6;
  string extraMsg = 7;
}

message AddFriendReply {

}
/*
    同意或拒绝好友请求
    -------------------------------------------
 */
message AddFriendResponseReq {
  //发起方
  string  fromUserID = 1;
  //接收方
  string  toUserID = 2;
  //处理消息
  string handleMsg = 3;
  //1为同意, 2为拒绝
  int64 flag = 4;
  string userID = 5;
  string platform = 6;
}
message AddFriendResponseReply {

}
/*
    删除好友
    -------------------------------------------
 */
message DeleteFriendReq {
  //发起方
  string  fromUserID = 1;
  //接收方
  string  toUserID = 2;

  string userID = 3;
}
message DeleteFriendReply {

}

/*
    设置好友资料
    -------------------------------------------
 */

message SetFriendInfoReq {
  //发起方
  string  fromUserID = 1;
  //接收方
  string  toUserID = 2;
  //好友备注
  optional string remark = 3;
  optional string backgroundUrl = 4;//背景图片
  string opUserID = 5; // 操作者id
  optional uint32 destroyMsgStatus=6; //阅后即焚状态 0-关闭 1-开启
}

message SetFriendInfoReply {

}

/*
    好友列表
    -------------------------------------------
 */

message ListFriendReq {
  optional string phone = 1; //手机号模糊匹配
  optional string code = 2; //code模糊匹配
  optional string userID = 3; //id精确查询
  optional string name = 4; // 昵称或备注模糊查询
  api.common.page.Pagination pagination = 5; //分页数据
}

message ListFriendReply {
  int64 total = 1; //总条数
  repeated api.common.model.v1.FriendInfo list = 2; //数据
}
/*
    根据好友id好友数据
    -------------------------------------------
 */
message FriendByIdsReq {
  string userID = 1; //用户id
  repeated string friendIds = 2; //好友id列表
}

message FriendByIdsReply {
  repeated api.common.model.v1.FriendInfo friendsInfo = 1; //数据
}
/*
    申请列表
    -------------------------------------------
 */
message FriendApplyListReq {
  string ownerID = 1; // 所属好友
  int64 kind = 2;
  string opUserID = 3; //操作者id
  api.common.page.Pagination pagination = 4; //分页数据
}

message FriendApplyListReply {
  int64 total = 1; //总条数
  repeated api.common.model.v1.FriendRequest list = 2; //数据
}
/*
    申请列表
    -------------------------------------------
 */
message GetFriendIDsReq {
  string userID = 1;
}

message GetFriendIDsReply {
  repeated string ids = 1;
}
/*
    是否好友
    -------------------------------------------
 */
message IsFriendReq {
  string ownerUserID = 1;
  string fromUserID = 2;
}

message IsFriendReply {
  bool isFriend = 1;
}

/*
    获取主动发出去的好友申请列表
    -------------------------------------------
 */
message GetFriendsApplyFromReq {
  string userID = 1;
  optional int32  hasHandled = 2; // 0:待处理1:同意2；拒绝
  api.common.page.Pagination pagination = 3; //分页数据
}
message GetFriendsApplyFromReply {
  int64 total = 1;
  repeated api.common.model.v1.FriendRequest list = 2; //数据
}
/*
    获取收到的好友申请列表
    -------------------------------------------
 */
message GetFriendsApplyReceiveReq {
  string userID = 1;
  optional int32  hasHandled = 2; // 0:待处理1:同意2；拒绝
  api.common.page.Pagination pagination = 3; //分页数据
}
message GetFriendsApplyReceiveReply {
  int64 total = 1;
  repeated api.common.model.v1.FriendRequest list = 2; //数据
}
/*
    根据申请人和被申请人获取请求数据
    -------------------------------------------
 */
message GetFriendRequestByApplicantReq {
  string fromUserID = 1; //发起者
  string toUserID = 2; //接受者
}

message GetFriendRequestByApplicantReply {
  api.common.model.v1.FriendRequest friendRequest = 1;//好友请求
}
/*
  单方面删除所有好友（注销时用）
 */
message DeleteAllFriendsReq {
  string userID = 1; //用户id
}
message DeleteAllFriendsReply {

}
/*
  获取同步的好友信息
 */
message GetSyncFriendReq {
  string userID = 1;
  api.common.page.Pagination pagination = 3; //分页数据
}

message GetSyncFriendReply {
  int64 total = 1;
  repeated api.common.model.v1.FriendBaseInfo list = 2; //数据
}

/*
  加入黑名单
 */
message AddBlackReq {
  string ownerUserID = 1; //用户ID
  string blackUserID = 2; //加入黑名单的用户ID
}

message AddBlackReply {

}
/*
  移除黑名单
 */
message RemoveBlackListReq {
  string fromUserID = 1;
  string toUserID = 2;
}

message RemoveBlackListReply {

}
/*
  判断是否在在黑名单中
 */
message IsBlackReq {
  string ownerUserID = 1;
  string toUserID = 2;
}

message IsBlackReply {
  bool isBlack = 1;
}

message GetBlacklistReq {
  string fromUserID = 1;
  string userID = 2;
  api.common.page.Pagination pagination = 3; //分页数据
}

message GetBlacklistReply {
  int64 total = 1;
  repeated api.common.model.v1.PublicUserInfo data = 2;
}